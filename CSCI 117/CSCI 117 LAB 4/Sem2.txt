// Run this program through the Oz interpreter by calling
//    runFull "declarative" "Sem2.txt" "Sem2.out"
// Explain the resulting store

local Max Y in
  Max = proc {$ X}
    local B in 
        {GT X Y B}
        if B then
          skip Browse X
        else
          skip Browse Y
        end
    end
  end
  Y = 3
  local X Y in 
    Y = 6
    X = 4
    skip Full
    {Max X}
  end
end

-Output 
Store : ((10), 4),
((11), 6),
((8), proc(["X"],[local ["B"] [local ["EXU1","EXU2","EXU3"] [EXU1 = X,EXU2 = Y,EXU3 = B,"GT" "EXU1" "EXU2" "EXU3"],local ["EXU1"] [EXU1 = B,if EXU1 then [skip/BX] else [skip/BY]]]],[("Y",9),("GT",4)])),
((9), 3),
((1), Primitive Operation),
((2), Primitive Operation),
((3), Primitive Operation),
((4), Primitive Operation),
((5), Primitive Operation),
((6), Primitive Operation),
((7), Primitive Operation)

Mutable Store: Empty
Current Environment : ("X" -> 10, "Y" -> 11, "Max" -> 8, "Y" -> 9, "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)
Stack : "local [\"EXU1\"] [EXU1 = X,\"Max\" \"EXU1\"]"

X : 4

[local ["Max","Y"] [Max = proc {$ X} [local ["B"] 
[local ["EXU1","EXU2","EXU3"] [EXU1 = X,EXU2 = Y,EXU3 = B,"GT" "EXU1" "EXU2" "EXU3"],
local ["EXU1"] [EXU1 = B,if EXU1 then [skip/BX] else [skip/BY]]]],
Y = 3,local ["X","Y"] [Y = 6,X = 4,skip/f,local ["EXU1"] [EXU1 = X,"Max" "EXU1"]]]]
-Explanation 

The Sem2.txt program functions as a procedural program. The initial procedure Max Y, is established to compare an argument with a variable within the program specifically with the variable X.
It evaluates whether X is greater than Y and if true it outputs X. Otherwise it outputs Y. Procedure B serves to determine if both X and Y are greater or less than each other, yielding the respective boolean result.
If X is greater it returns true. Otherwise it skips X and vice versa. In the context of the Max Y it is initiated with a local variable Y, initially unbounded ((9), unbound). Y is assigned the value 3 resulting in (9,3).
In another segment, X and Y are reassigned, with X set to 4 and Y to 6. This reassignment leads to X being (10, unbound) and Y being (11, unbound) which then become X = (10,4) and Y = (11,6).
The program outputs the Mutable Store Current Environment and X: 4. 