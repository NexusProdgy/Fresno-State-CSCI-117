// Run this program through the Oz interpreter by calling
//    runFull "declarative" "Sem1.txt" "Sem1.out"
// Explain the resulting store

local X in
  local Y in
    X = 1
    Y = pair(1:X 2:X)
    case Y of pair(1:Z 2:W) then 
      local S in 
        {IntPlus Z W S}
        skip Full
      end
      else
        skip Basic
    end
  end
end

-Output
Store : ((15, 12), 2),
((14, 13, 11, 10, 8), 1),
((9), pair(1:10 2:11)),
((1), Primitive Operation),
((2), Primitive Operation),
((3), Primitive Operation),
((4), Primitive Operation),
((5), Primitive Operation),
((6), Primitive Operation),
((7), Primitive Operation)

Mutable Store: Empty
Current Environment : ("S" -> 12, "Z" -> 10, "W" -> 11, "Y" -> 9, "X" -> 8, "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)
Stack : ""

[local ["X"] [local ["Y"] [X = 1,local ["EXU1","EXU2"] 
[EXU1 = X,EXU2 = X,Y = pair(1:EXU1 2:EXU2)],case Y of pair(1:Z 2:W) 
then [local ["S"] [local ["EXU1","EXU2","EXU3"]
[EXU1 = Z,EXU2 = W,EXU3 = S,"IntPlus" "EXU1" "EXU2" "EXU3"],skip/f]] else [skip]]]]

-Explanation 
Sem1 is a statement program for case. The statement can be used for pattern matching with a variable from the given list.If the variable matches the list it then 
moves to the next statement and continues until the variable does not satisfy the conditions. In this file, variable X will be binded to 1 and it will add the information into the store. As for Y,
it is binded to 1:Z and 2:W in the program. For variable S, it will bind to the bounds of Z, W, S. In the Command Prompt,
it displayed the Store, Mutable Store. Sem1.out looked like it displayed a form of syntax that the program was following. 
